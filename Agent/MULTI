// components/repo-input.tsx
import React from 'react';
import { Badge } from './ui/badge'; // Assuming Badge is imported from a UI library
import { Button } from './ui/button';

interface RepoInputProps {
  loading: boolean;
  onSubmit: (url: string) => void;
}

const RepoInput: React.FC<RepoInputProps> = ({ loading, onSubmit }) => {
  const [value, setValue] = React.useState('');

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    onSubmit(value);
  };

  return (
    <div>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          value={value}
          onChange={(e) => setValue(e.target.value)}
          placeholder="Enter repository URL"
          className="border p-2 rounded pl-8 ring-1 ring-transparent focus-visible:ring-2 focus-visible:ring-violet-500/50"
        />
        <Button
          type="submit"
          disabled={loading}
          className="bg-gradient-to-r from-violet-600 to-blue-600 text-white hover:from-violet-700 hover:to-blue-700 ml-2 px-4 py-2 rounded"
        >
          Load
        </Button>
      </form>
      {/* Recent section */}
      <div className="mt-4">
        <h3 className="text-lg font-medium">Recent</h3>
        {/* Placeholder for recent repositories */}
        <div className="flex items-center gap-2 flex-wrap">
          {/* Recent repositories will be rendered here */}
        </div>
      </div>
    </div>
  );
};

export default RepoInput;

// app/page.tsx
'use client';

import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs'; // Assuming Tabs components are imported from a UI library
import RepoInput from './components/repo-input';
import { Badge } from './ui/badge'; // Assuming Badge is imported from a UI library
import { Panel, PanelGroup, PanelResizeHandle } from './ui/panel'; // Assuming Panel components are imported from a UI library
import { ScrollArea } from './ui/scroll-area'; // Assuming ScrollArea is imported from a UI library
import FileTree from './components/file-tree';
import CodeViewer from './components/code-viewer';
import ExplanationPanel from './components/explanation-panel';
import { Loader2 } from 'lucide-react'; // Assuming Loader2 is imported from Lucide React
import { Card, CardContent, CardHeader, CardTitle } from './ui/card'; // Assuming Card components are imported from a UI library
import { Folder, FileText, Search } from 'lucide-react'; // Assuming Folder and FileText are imported from Lucide React
import { useChat } from '@ai-sdk/react';

interface PageProps {
  repoInfo: any;
  loadingTree: boolean;
  tree: any;
  selectedPath: string | undefined;
  code: string | undefined;
  language: string | undefined;
  explanation: string | undefined;
  explaining: boolean;
  explainCode: (code: string, language: string, path: string | undefined) => void;
  handleLoadRepo: (url: string) => void;
  handleSelectFile: (path: string) => void;
}

const Page: React.FC<PageProps> = ({
  repoInfo,
  loadingTree,
  tree,
  selectedPath,
  code,
  language,
  explanation,
  explaining,
  explainCode,
  handleLoadRepo,
  handleSelectFile,
}) => {
  const { messages, input, handleInputChange, handleSubmit, status, stop, error, reload } = useChat({
    api: '/api/github/file',
    headers: {
      accept: 'application/vnd.github.raw',
      'X-GitHub-Api-Version': '2022-11-28',
    },
    body: {
      url: selectedPath,
    },
    credentials: 'same-origin',
  });

  function detectLanguageFromCode(code: string): string {
    if (!code) return ""
    const lower = code.toLowerCase()
    const cHints = ["#include", "printf(", "scanf(", "malloc(", "int main(", "free("]
    const cppHints = ["#include <iostream", "std::", "using namespace std", "cout <<", "cin >>", "template<", "vector<", "map<", "class ", "new ", "delete "]
    const javaHints = ["public class", "system.out.println", "import java.", "public static void main", "@override", "new "]
    const pyHints = ["def ", "import ", "print(", "self", "class ", "async def", "from "]
    const scores = { c: 0, cpp: 0, java: 0, python: 0 }
    cHints.forEach((h) => (scores.c += lower.includes(h) ? 1 : 0))
    cppHints.forEach((h) => (scores.cpp += lower.includes(h) ? 1 : 0))
    javaHints.forEach((h) => (scores.java += lower.includes(h) ? 1 : 0))
    pyHints.forEach((h) => (scores.python += lower.includes(h) ? 1 : 0))
    // If both C and C++ detected, prefer C++ if it uses C++ features
    if (scores.cpp > 0 && scores.cpp >= scores.c) return "cpp"
    const max = Math.max(scores.c, scores.java, scores.python)
    if (max === 0) return ""
    if (max === scores.c) return "c"
    if (max === scores.java) return "java"
    return "python"
  }

  return (
    <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4">
      {/* Mobile: single panel */}
      <div className="md:hidden">
        {/* Mobile layout */}
      </div>

      {/* Desktop: resizable two-panel */}
      <div className="hidden md:block space-y-3">
        <PanelGroup direction="horizontal" className="rounded-lg border bg-card">
          <Panel defaultSize={28} minSize={20} className="h-[65vh]">
            <div className="h-full flex flex-col">
              <div className="px-3 py-2 border-b flex items-center justify-between">
                <div className="flex items-center gap-2 text-sm font-medium">
                  <Folder className="size-4 text-violet-600 dark:text-violet-400" />
                  <span>Repository files</span>
                </div>
                {repoInfo && (
                  <a
                    href={repoInfo.url}
                    target="_blank"
                    rel="noreferrer"
                    className="text-xs text-muted-foreground hover:text-foreground"
                  >
                    View on GitHub
                  </a>
                )}
              </div>
              <div className="flex-1">
                {loadingTree ? (
                  <div className="h-full grid place-items-center text-muted-foreground">
                    <div className="flex items-center gap-2">
                      <Loader2 className="size-4 animate-spin" />
                      <span className="text-sm">Loading file tree...</span>
                    </div>
                  </div>
                ) : tree ? (
                  <ScrollArea className="h-full p-2 pr-3">
                    <FileTree nodes={tree} onSelectFile={handleSelectFile} selectedPath={selectedPath || undefined} />
                  </ScrollArea>
                ) : (
                  <div className="h-full grid place-items-center text-muted-foreground text-sm p-4 text-center">
                    Load a repository to browse files. Or paste code above to explain without GitHub.
                  </div>
                )}
              </div>
            </div>
          </Panel>
          <PanelResizeHandle className="w-1 bg-border relative group">
            <div className="absolute inset-y-0 left-1/2 -translate-x-1/2 w-0.5 bg-gradient-to-b from-violet-500/70 to-blue-500/70 group-hover:from-violet-500 group-hover:to-blue-500 transition-colors" />
          </PanelResizeHandle>
          <Panel defaultSize={72} minSize={40} className="h-[65vh]">
            <div className="h-full flex flex-col">
              <div className="px-3 py-2 border-b flex items-center justify-between">
                <div className="flex items-center gap-2 text-sm font-medium">
                  <FileText className="size-4 text-blue-600 dark:text-blue-400" />
                  <span>Code</span>
                  {selectedPath && (
                    <Badge variant="secondary" className="ml-2 max-w-[40ch] truncate">
                      {selectedPath}
                    </Badge>
                  )}
                </div>
                {code && (
                  <div className="text-xs text-muted-foreground">
                    Language: <Badge variant="outline">{language || "auto"}</Badge>
                  </div>
                )}
              </div>
              <div className="flex-1 overflow-hidden">
                {code ? (
                  <CodeViewer code={code} language={language} path={selectedPath || undefined} />
                ) : (
                  <div className="h-full grid place-items-center text-muted-foreground text-sm p-4 text-center">
                    Select a file to view its code.
                  </div>
                )}
              </div>
            </div>
          </Panel>
        </PanelGroup>

        {/* Explanation as separate block below */}
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-base">Explanation</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="h-[35vh]">
              <ExplanationPanel
                explanation={explanation}
                loading={explaining}
                onRegenerate={code ? () => explainCode(code, language, selectedPath || undefined) : undefined}
              />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tabs for different sections */}
      <Tabs defaultValue="repo" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="repo">Repo</TabsTrigger>
          <TabsTrigger value="code">Code</TabsTrigger>
        </TabsList>
        <TabsContent value="repo" className="pt-4">
          <RepoInput loading={loadingTree} onSubmit={handleLoadRepo} />
          {repoInfo && (
            <div className="mt-3 flex items-center gap-2 text-sm text-muted-foreground">
              <Badge variant="secondary">
                {repoInfo.owner}/{repoInfo.repo}
              </Badge>
              <span className="text-xs">branch</span>
              <Badge variant="outline">{repoInfo.branch}</Badge>
            </div>
          )}
        </TabsContent>
        <TabsContent value="code" className="pt-4">
          <div className="flex flex-col">
            {messages.map(message => (
              <div key={message.id}>
                {message.role === 'user' ? 'User: ' : 'AI: '}
                {message.content}
              </div>
            ))}
            {(status === 'submitted' || status === 'streaming') && (
              <div>
                {status === 'submitted' && <Loader2 className="size-4 animate-spin" />}
                <button type="button" onClick={() => stop()} disabled={!(status === 'streaming' || status === 'submitted')}>
                  Stop
                </button>
              </div>
            )}
            {error && (
              <>
                <div>An error occurred.</div>
                <button type="button" onClick={() => reload()} disabled={!(status === 'ready' || status === 'error')}>
                  Retry
                </button>
              </>
            )}
            <form onSubmit={handleSubmit}>
              <input
                name="prompt"
                value={input}
                onChange={handleInputChange}
                disabled={status !== 'ready'}
                placeholder="Enter code or file path"
                className="border p-2 rounded"
              />
              <button type="submit" className="ml-2 px-4 py-2 bg-gradient-to-r from-violet-600 to-blue-600 text-white hover:from-violet-700 hover:to-blue-700 rounded">
                Explain
              </button>
            </form>
          </div>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Page;

// components/code-viewer.tsx
import React from 'react';
import { Badge } from './ui/badge';
import { Copy, Check } from 'lucide-react';
import { useToast } from './ui/use-toast';
import { useTheme } from 'next-themes';
import { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter';
import { dracula, github } from 'react-syntax-highlighter/dist/esm/styles/hljs';
import { defineLanguage } from './language-definitions';

interface CodeViewerProps {
  code: string;
  language?: string;
  path?: string;
}

const extensionToLang: Record<string, string> = {
  ".c": "c",
  ".h": "c",
  ".cpp": "cpp",
  ".cc": "cpp",
  ".cxx": "cpp",
  ".hpp": "cpp",
  ".hh": "cpp",
  ".hxx": "cpp",
  ".java": "java",
  ".py": "python",
  ".js": "javascript",
  ".ts": "typescript",
  ".tsx": "tsx",
  ".jsx": "jsx",
  ".json": "json",
  ".md": "markdown",
  ".sh": "bash",
  ".yml": "yaml",
  ".yaml": "yaml",
}

const CodeViewer: React.FC<CodeViewerProps> = ({ code, language, path }) => {
  const { toast } = useToast();
  const { theme } = useTheme();
  const [copied, setCopied] = React.useState(false);

  const handleCopyClick = () => {
    navigator.clipboard.writeText(code);
    setCopied(true);
    toast({
      title: "Copied to clipboard!",
    });
    setTimeout(() => setCopied(false), 2000);
  };

  const detectedLanguage = React.useMemo(() => {
    if (language) return language;
    if (!path) return "text";
    const ext = path.slice(path.lastIndexOf("."));
    return extensionToLang[ext] || "text";
  }, [language, path]);

  React.useEffect(() => {
    defineLanguage();
  }, []);

  return (
    <div className="relative">
      <div className="absolute top-2 right-2 z-10">
        <button
          onClick={handleCopyClick}
          className="flex items-center gap-1 rounded bg-secondary px-2 py-1 text-xs font-medium text-secondary-foreground hover:bg-secondary/80"
        >
          {copied ? <Check className="size-3" /> : <Copy className="size-3" />}
          {copied ? "Copied!" : "Copy"}
        </button>
      </div>
      <SyntaxHighlighter
        language={detectedLanguage}
        style={theme === "dark" ? dracula : github}
        className="rounded !bg-muted !p-4 !m-0"
        codeTagProps={{
          className: "break-words !whitespace-pre-wrap",
        }}
      >
        {code}
      </SyntaxHighlighter>
    </div>
  );
};

export default CodeViewer;

// app/api/github/file/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { useChat } from '@ai-sdk/react';

export const runtime = 'edge'

async function fetchFileContent(url: string) {
  const res = await fetch(url, {
    headers: {
      accept: 'application/vnd.github.raw',
      'X-GitHub-Api-Version': '2022-11-28',
    },
  })
  if (!res.ok) {
    console.error('Github fetch failed', res.status, res.statusText, url)
    return null
  }
  return res.text()
}

function detectLanguageFromPath(path: string, content: string): string {
  const lower = path.toLowerCase()
  if (lower.endsWith(".java")) return "java"
  if (lower.endsWith(".py")) return "python"
  if (lower.endsWith(".cpp") || lower.endsWith(".cc") || lower.endsWith(".cxx") || lower.endsWith(".hpp") || lower.endsWith(".hh") || lower.endsWith(".hxx")) {
    return "cpp"
  }
  if (lower.endsWith(".c") || lower.endsWith(".h")) return "c"
  if (lower.endsWith(".js")) return "javascript"
  if (lower.endsWith(".ts")) return "typescript"
  if (lower.endsWith(".tsx")) return "tsx"
  if (lower.endsWith(".jsx")) return "jsx"
  if (lower.endsWith(".json")) return "json"
  if (lower.endsWith(".md")) return "markdown"
  // Fallback heuristic
  const lc = content.toLowerCase()
  if (/\bstd::/.test(lc) || /#include\s*<iostream>/.test(lc) || /cout\s*<</.test(lc) || /cin\s*>>/.test(lc) || /template\s*</.test(lc)) {
    return "cpp"
  }
  if (/^\s*#include/m.test(content)) return "c"
  if (/^\s*import java\./m.test(content) || /public class /.test(content)) return "java"
  if (/^\s*def\s+\w+\(/m.test(content) || /^\s*class\s+\w+:/m.test(content)) return "python"
  return "text"
}

export async function GET(req: NextRequest) {
  const { searchParams } = new URL(req.url)
  const url = searchParams.get('url')
  if (!url) {
    return NextResponse.json({ error: 'Missing url parameter' }, { status: 400 })
  }

  try {
    const content = await fetchFileContent(url)
    if (!content) {
      return NextResponse.json({ error: 'Failed to fetch file content' }, { status: 500 })
    }
    const language = detectLanguageFromPath(url, content)
    return NextResponse.json({ content, language })
  } catch (e) {
    console.error("Github file fetch error", e)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// app/api/explain/route.ts
import { openai } from '@ai-sdk/openai';
import { streamText } from 'ai';

// Allow streaming responses up to 30 seconds
export const maxDuration = 30;

export async function POST(req: Request) {
  const { messages } = await req.json();

  const result = streamText({
    model: openai('gpt-4-turbo'),
    system: 'You are a world-class computer science tutor. When asked to explain code, you give concise explanations with code examples. You don\'t act like a chatbot.',
    messages,
  });

  return result.toDataStreamResponse();
}

// components/file-tree.tsx
import React from "react"
import { FileText, Folder, FolderOpen } from 'lucide-react'
import { cn } from "@/lib/utils"

interface FileTreeProps {
  nodes: any
  onSelectFile: (path: string) => void
  selectedPath?: string
}

const FileTree: React.FC<FileTreeProps> = ({ nodes, onSelectFile, selectedPath }) => {
  return (
    <div className="text-sm">
      {nodes.map((node: any) => {
        const isSelected = node.path === selectedPath
        return node.type === "file" ? (
          <div
            key={node.path}
            className={cn(
              "group grid grid-cols-[auto_1fr] items-center gap-1 rounded px-1 py-1 cursor-pointer transition-all",
              "hover:bg-violet-500/10",
              isSelected && "bg-violet-500/15 ring-1 ring-violet-500/30",
            )}
            onClick={() => onSelectFile(node.path)}
          >
            <FileText className="size-4 text-blue-600 dark:text-blue-400" />
            <span className="truncate text-sm group-hover:underline">{node.name}</span>
          </div>
        ) : (
          <Directory
            key={node.path}
            node={node}
            onSelectFile={onSelectFile}
            selectedPath={selectedPath}
          />
        )
      })}
    </div>
  )
}

interface DirectoryProps {
  node: any
  onSelectFile: (path: string) => void
  selectedPath?: string
}

const Directory: React.FC<DirectoryProps> = ({ node, onSelectFile, selectedPath }) => {
  const [isOpen, setIsOpen] = React.useState(false)

  const handleToggle = () => {
    setIsOpen(!isOpen)
  }

  return (
    <div>
      <div
        className="group grid grid-cols-[auto_1fr] items-center gap-1 rounded px-1 py-1 cursor-pointer hover:bg-muted/60 transition-colors"
        onClick={handleToggle}
      >
        {isOpen ? (
          <FolderOpen className="size-4 text-violet-600 dark:text-violet-400" />
        ) : (
          <Folder className="size-4 text-violet-600 dark:text-violet-400" />
        )}
        <span className="text-sm font-medium group-hover:underline">{node.name}</span>
      </div>
      {isOpen && node.children && (
        <div className="ml-4">
          <FileTree nodes={node.children} onSelectFile={onSelectFile} selectedPath={selectedPath} />
        </div>
      )}
    </div>
  )
}

export default FileTree
